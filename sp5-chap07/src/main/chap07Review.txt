1. AOP 프로그래밍의 기본 : 관심의 분리(= 응집도 높이기)

    chap07 프로젝트의 예제 클래스들로 설명

    ExeTimeCalculator 클래스는 핵심 기능인 factorial 을 다른 객체에 위임하고,
    부가적인 기능(런타임 구하기)을 제공함. 이런 객체를 프록시 라고 한다.

    각 클래스(ImpeCalculator, RecCalculator)마다 런타임을 구하는 코드가 있었지만,
    그렇게 되면 코드 중복의 문제와 그에 따른 유지보수의 문제도 있고,
    각 클래스의 관심이 분산되어 버린다 (= 응집도가 낮아짐)
    그렇기 때문에 실행시간을 구하는 공통의 부가적인 기능은 프록시(ExeTimeCalculator) 에서 맡아준다.

    즉, AOP 는 공통 기능 구현과 핵심 기능 구현의 분리하는 것으로부터 시작한다고 볼 수 있다.


2. AOP : 핵심 기능의 코드를 수정하지 않으면서, 공통 기능의 구현을 추가, 3가지 방법이 있음.
    (1) 컴파일 시점에 코드에 공통 기능 삽입
    (2) 클래스 로딩 시점에 바이트 코드에 공통 기능 삽입
    (3) 런타임에 프록시 객체를 생성해서 공통 기능 삽입 ( = 스프링 AOP)


3. AOP 주요 용어
    (1) Advice
        공통 관심 기능을 언제 핵심 로직에 적용할 지를 정의하고 있음.
        ex) 트랜잭션 시작(공통 기능) 기능을 메서드를 호출하기 전(언제)에 적용

    (2) Joinpoint
        Advice 를 적용 가능한 지점
        ex) 메서드 호출, 필드 값 변경 등
        스프링은 프록시를 이용해서 AOP 를 구현하기 때문에 메서드 호출에 대한 Joinpoint 만 지원

    (3) Pointcut
        Joinpoint 의 부분 집합, 실제 Advice 가 적용되는 Joinpoint
        스프링에서는 정규 표현식이나 AspectJ 문법을 이용하여 Pointcut 을 정의할 수 있음.

    (4) Weaving
        Advice 를 핵심 로직 코드에 적용하는 것

    (5) Aspect
        여러 객체에 공통으로 적용되는 기능
        ex) 트랜잭션, 보안 등


4. Advice 의 종류
    (1) Before Advice
        대상 객체의 메서드 호출 전에 공통 기능 수행

    (2) After Returning Advice
        대상 객체의 메서드가 익셉션 없이 실행된 이후에 공통 기능 수행

    (3) After Throwing Advice
        대상 객체의 메서드 실행 중 Exception 이 발생할 때 공통 기능 수행

    (4) After Advice
        Exception 발생 여부 상관없이 대상 객체의 메서드 실행 후에 공통 기능 수행
        (finally 와 비슷함)

    (5) Around Advice
        대상 객체의 메서드 실행 전, 후 또는 Exception 발생 시점에 공통 기능 수행


5. 프록시 생성 방식

    // MainAspect.java
    RecCalculator cal = ctx.getBean("calculator", RecCalculator.class);

    // AppCtx.java
    @Bean
    public Calculator calculator() {
        return new RecCalculator();
    }

    MainAspect 클래스에서 RecCalculator 타입의 calculator 이름의 빈을 사용하도록 수정하였고,
    AppCtx 에도 마찬가지로 RecCalculator 객체를 주입시켰다.

    하지만 이렇게 바꾼 후 MainAspect.java 를 실행하면 Exception 이 발생한다.

    Why?
    스프링은 AOP 를 위한 프록시 객체를 생성할 때
    실제 생성할 빈 객체가 인터페이스를 상속하면
    인터페이스를 이용해서 프록시를 생성하기 때문 ! 실제 생성할 빈 객체를 이용하지 않는다.

            <<Interface>>
             Calculator
                  |
         ------------------
         |                |
      $Proxy17       RecCalculator

    "calculator" 빈의 실제 타입이 Calculator 를 상속한 프록시 타입이기 때문에
    RecCalculator 로 타입 변환을 할 수가 없다.

    프록시 객체가 인터페이스가 아닌 클래스를 이용해서 프록시를 생성하고 싶을때
    @EnableAspectJAutoProxy 의 proxyTargetClass 값에 true 를 넣어준다.

    //AppCtx.java
    ...
    @Configuration
    @EnableAspectJAutoProxy(proxyTargetClass = true)
    public class AppCtx {
        ...
    }


6. 한 Pointcut 에 여러 Advice 를 적용하고 싶을 때
    AppCtxWithCache.java
    @EnableAspectJAutoProxy 을 적용
    @Aspect 가 CacheAspect, ExeTimeAspect 둘 다 있다.

    사실 이럴 때 어떤 순서로 AOP 가 적용되는지는 제대로 이해하지 못하였지만,
    @Order 로 순서를 적용시킬 수 있다.

    // CacheAspect.java
    @Aspect
    @Order(1)
    public class CacheAspect {
        ...
    }

    // ExeTimeAspect.java
    @Aspect
    @Order(2)
    public class ExeTimeAspect {
        ...
    }


요약
    - AOP 파트에서 이것저것 너무 세세하게 파고들려고 하지 말고, 지금은 예제의 코드가 어떻게 흘러가는지만 파악하자.
    - 하지만 응집도를 높이기 위한 AOP 프로그래밍이 무엇인지 개념은 확실하게 잡아야 할 것이다.