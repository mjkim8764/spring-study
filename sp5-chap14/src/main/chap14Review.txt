chap13 코드에서 추가한 부분
    1. 특정 기간에 가입했던 회원 정보 출력
        (1) MemberDao 에서 쿼리 결과를 가져오는 selectByRegdate 메서드 작성
        (2) 검색 시작 시간 기준, 끝 시간 기준을 담고 있는 ListCommand 커맨드 객체 작성
        (3) ListCommand 커맨드 객체의 from, to 변수에 @DateTimeFormat 어노테이션 붙임
            (view 의 input 태그 스트링을 LocalDateTime 타입으로 변환하기 위한 추가설정)
        (4) 해당 서비스와 뷰를 매핑하는 MemberListController 작성
        (5) MemberListController 빈 설정을 ControllerConfig 설정 클래스에 추가
        (6) JSTL 이 제공하는 날짜 형식 태그는 자바 8의 LocalDateTime 타입은 지원하지 않기 때문에
        태그 파일을 사용해서 LocalDateTime 값을 지정한 형식으로 출력하도록 함 (WEB-INF/tags/formatDateTime.tag)
        태그 부분 코드를 확실히 이해하지는 못했음.
        (7) 뷰 작성 (memberList.jsp)

    2. 위 코드에서 지정한 날짜 형식은 "yyyyMMddHH" 이기 때문에
    뷰에서 "20220420" 처럼"yyyyMMdd" 부분만 입력하면 지정한 형식과 일치하지 않게 됨. 이 때 400 에러가 뜨기 때문에
    에러 처리를 해줘야 한다.
        (1) MemberListController 에서 Error 처리를 해줌.
        (2) label.properties 에 에러 메시지 작성
        (3) 뷰 페이지 (memberList.jsp) 에 <form:errors> 태그로 에러 메시지 출력 부분 추가

    3. @DateTimeFormat 어노테이션을 사용하면 지정한 형식의 문자열을 LocalDateTime 타입으로 변환한다는 것은 확인함.
    누가 이 과정을 하는가? -> WebDataBinder

    상세 설명
        요청 매핑 어노테이션 적용 메서드와 DispatcherServlet 사이를 연결하기 위해 RequestMappingHandlerAdapter 객체를 사용
        이 객체가 요청 파라미터와 커맨드 객체 사이의 변환 처리를 위해 WebDataBinder 를 사용.
        WebDataBinder 는 직접 타입을 변환하지 않고 ConversionService 에 역할을 위임.
        이 ConversionService 는 @EnableWebMvc 어노테이션을 사용하면
        DefaultFormattingConversionService 를 ConversionService 로 사용함.

        이 DefaultFormattingConversionService 가 @DateTimeFormat 어노테이션을 사용한 시간 관련 타입 변환 기능을 제공한다.


    4. @PathVariable
        ID 가 99인 회원의 정보를 조회하기 위한 URL 을
        http://localhost:8090/sp5-chap14/members/99
        의 형식을 사용한다고 하자. 그러면 각 회원마다 경로의 마지막 부분이 달라진다.

        이렇게 경로의 일부가 고정되어 있지 않고 달라질 때 사용하는 것이 @PathVariable 이다.


    5. 컨트롤러 익셉션 처리 - ExceptionHandler
        (1) 없는 ID 를 PathVariable 로 사용하면 MemberNotFoundException 이 발생하는데
        이 때 뷰에는 500 에러가 뜨게 된다.

        (2) 그리고 PathVariable 을 Long 타입으로 설정했는데 실제 요청 경로에 숫자가 아닌 문자를 입력하면
        뷰에 400 에러가 발생한다.

        하지만 이런 화면이 보이는 것보다 Exception 을 알맞게 처리해서 사용자에게 올바른 안내를 해 주는 것이 더 좋다.

        (1) 의 경우에는 해당 Exception 을 try~catch 로 잡고 나서 안내 화면을 보여주는 뷰를 보여주면 되지만
        (2) 의 타입 변환 실패 같은 경우는 @ExceptionHandler 어노테이션을 사용하면 쉽게 에러 화면을 보여줄 수 있다.

        해당 서비스를 호출하는 MemberDetailController 에 @ExceptionHandler 를 적용한 메서드 2개를 작성하였다.

        Exception 객체에 대한 정보를 알고 싶다면 메서드의 파라미터로 객체를 전달받으면 된다.

        @ExceptionHandler(TypeMismatchException.class)
        public String handleTypeMismatchException(TypeMismatchException e) {
            // e 객체를 사용한 로그 관련 작업
            return "member/invalidId";
        }


    6. 공통 익셉션 처리 - @ControllerAdvice
        앞서 MemberDetailController 에 발생할 수 있는 예외 2가지를 처리하기 위해
        @ExceptionHandler 어노테이션을 적용한 메서드를 2개 작성하였다.
        하지만 @ExceptionHandler 는 해당 컨트롤러에서 발생한 Exception 만 처리한다.

        다수의 Controller 에서 동일한 타입의 Exception 이 발생하고 이를 처리하는 코드가 동일하다면
        컨트롤러마다 같은 예외 처리 코드를 작성해야 하므로 코드 중복을 발생시킨다.

        이를 처리하는 것이 @ControllerAdvice 어노테이션이다.

        예를 들어 아래와 같이 작성할 수 있다.

        @ControllerAdvice("spring")
        public class CommonExceptionHandler {

            @ExceptionHandler(RuntimeException.class)
            public String handlerRuntimeException() {
                return "error/commonException";
            }
        }

        @ControllerAdvice 어노테이션이 적용된 클래스는 지정 범위의 컨트롤러에 공통으로 사용될 설정을 지정할 수 있다.
        위 코드는 spring 패키지와 그 하위 패키지에 속한 컨트롤러 클래스에 공통 기능을 정의하는 코드다.

        @ControllerAdvice 적용 클래스가 동작하려면 해당 클래스를 스프링에 빈으로 등록해야 한다.


    7. @ExceptionHandler 적용 메서드의 우선 순위
        @ControllerAdvice 클래스에 있는 @ExceptionHandler 메서드와
        컨트롤러 클래스에 있는 @ExceptionHandler 메서드 중 우선순위는 아래와 같다.

        - 같은 컨트롤러에 위치한 @ExceptionHandler 메서드 중 해당 익셉션을 처리할 수 있는 메서드를 검색
        - 같은 클래스에 위치한 메서드가 Exception 을 처리할 수 없으면
         @ControllerAdvice 클래스에 위치한 @ExceptionHandler 메서드를 검색


       @ControllerAdvice 이 제공하는 속성은 아래와 같다.

       value, basePackages (String[]) : 공통 설정을 적용할 컨트롤러가 속하는 기준 패키지
       annotations (Class<? extends Annotation>[]) : 특정 어노테이션이 적용된 컨트롤러 대상
       assignableTypes (Class<?>[]) : 특정 타입 또는 그 하위 타입인 컨트롤러 대상


    8. @ExceptionHandler 어노테이션 적용 메서드의 파라미터와 리턴 타입

        @ExceptionHandler 어노테이션을 붙인 메서드는 다음 파라미터를 가질 수 있다.
           - HttpServletRequest, HttpServletResponse, HttpSession
           - Model
           - Exception

        리턴 가능한 타입은 아래와 같다.
           - ModelAndView
           - String (뷰 이름)
           - @ResponseBody 어노테이션을 붙인 임의 객체
           - ResponseEntity







