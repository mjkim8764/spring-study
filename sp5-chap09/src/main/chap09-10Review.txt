※ p250 의 [그림 10.1] "스프링 MVC 의 핵심 구성 요소" 정리

기본적으로 DispatcherServlet 이 모든 연결을 담당한다.

    1. 요청 전송
        웹 브라우저에서 DispatcherServlet 으로 요청

    2. 요청 URL 과 매칭되는 컨트롤러 검색
        DispatcherServlet 이 직접 컨트롤러를 검색하지 않고
        HandlerMapping 이라는 빈 객체에게 컨트롤러 검색을 요청
        HandlerMapping 은 클라이언트의 요청 경로를 이용해서 이를 처리할 컨트롤러 빈 객체를 DispatcherServlet 에게 전달
        (ex : 웹 요청 경로가 '/hello' 라면 등록된 컨트롤러 빈 중에서 '/hello' 요청 경로를 처리할 컨트롤러를 리턴)

    3. 처리 요청 ~ 실행 ~ 결과 리턴
        DispatcherServlet 은 HandlerMapping 이 찾아준 컨트롤러 객체를
        처리할 수 있는 HandlerAdapter 빈에게 요청 처리를 위임한다.
        HandlerAdapter 는 컨트롤러의 알맞은 메서드를 호출해서 요청을 처리하고
        그 결과를 ModelAndView 라는 객체로 변환해서 DispatcherServlet 에게 리턴
        (컨트롤러는 개발자가 직접 작성)

    4. 뷰 검색
        컨트롤러 요청 처리 결과를 받은 DispatcherServlet 은 결과를 보여줄 뷰를 찾기 위해 ViewResolver 빈 객체를 사용한다.
        ModelAndView 는 컨트롤러가 리턴한 뷰 이름을 담고 있는데
        ViewResolver 는 이 뷰 이름에 해당하는 View 객체를 찾거나 생성해서 리턴한다.

        응답을 생성하기 위해 JSP 를 사용하는 ViewResolver 는 매번 새로운 View 객체를 생성해서 DispatcherServlet 에 리턴한다.

    5. 응답 생성 요청 ~ 응답 생성
        DispatcherServlet 은 ViewResolver 가 리턴한 View 객체에게 응답 결과 생성을 요청함.
        JSP 를 사용하는 경우 뷰 객체는 JSP 를 실행함으로써 웹 브라우저에게 전송할 응답 결과를 생성함 - 끝.


DispatcherServlet 과 스프링 컨테이너
    DispatcherServlet 은 전달받은 설정 파일을 이용해서 스프링 컨테이너를 생성한다.
    이 컨테이너에는 앞서 얘기했던 HandlerMapping, HandlerAdapter, Controller, ViewResolver 빈이 있다.
    DispatcherServlet 은 이 컨테이너로 부터 각 과정에 필요한 빈 객체를 구한다.

    그렇기 때문에 DispatcherServlet 이 사용하는 설정 파일(web.xml)에는 이들 빈에 대한 정의가 포함되어 있어야 한다.

    그런데 config 패키지의 MvcConfig 클래스를 보면 HandlerMapping, HandlerAdapter 클래스를 빈으로 등록하는 코드가
    딱히 보이지 않는다. 이걸 설정해 주는 것이 @EnableWebMvc 이다.

    @EnableWebMvc 가 빈으로 추가해주는 클래스 중에는
    @Controller 타입의 핸들러 객체를 처리하기 위한 아래의 두 클래스가 포함되어 있다.
    - org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping
    - org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter

    RequestMappingHandlerMapping : @Controller 어노테이션이 적용된 객체의 요청 매핑 어노테이션(@GetMapping 등) 값을 이용해서
                                  웹 브라우저의 요청을 처리할 컨트롤러 빈을 찾는다.
    RequestMappingHandlerAdapter : 컨트롤러의 메서드를 호출, 실행하고 그 결과를 ModelAndView 객체로 변환해서
                                  DispatcherServlet 에 리턴

    HelloController 클래스를 보면 리턴값의 타입이 스트링이다.
    RequestMappingHandlerAdapter 는 리턴값의 타입이 스트링이면 해당 값을 뷰 이름으로 갖는 ModelAndView 객체를 생성해서
    DispatcherServlet 에 리턴한다. 이 때 Model 객체에 보관된 값도 함께 전달한다.


WebMvcConfigurer 인터페이스
    @EnableWebMvc 어노테이션은 @Controller 을 붙인 컨트롤러를 위한 설정 생성 이외에도
    WebMvcConfigurer 타입의 빈을 이용해서 MVC 설정을 추가로 생성한다.

    MvcConfig 클래스를 보면 WebMvcConfigurer 인터페이스를 상속하고 있다.
    그렇기 때문에 빈 객체의 타입은 WebMvcConfigurer 가 된다. (인터페이스를 따라 가므로)


JSP 를 위한 ViewResolver
    다시 MvcConfig 클래스를 보자. WebMvcConfigurer 인터페이스에 정의된 configureViewResolvers 오버라이딩을 볼 수 있다.
    파라미터로 ViewResolveRegistry 타입의 파라미터를 갖는데
    ViewResolverRegistry#jsp() 메서드를 사용하면 JSP 를 위한 ViewResolver 를 설정할 수 있다.

    위 설정은 org.springframework.web.servlet.view.InternalResourceViewResolver 클래스를 이용해서
    아래 설정과 같은 빈을 등록한다.

    @Bean
    public ViewResolver viewResolver() {
        InternalResourceViewResolver vr = new InternalResourceViewResolver();
        vr.setPrefix("/WEB-INF/view/");
        vr.setSuffix(".jsp");
        return vr;
    }


    위 3번에서 DispatcherServlet 은 컨트롤러의 실행 결과를 HandlerAdapter 를 통해서 ModelAndView 형태로 받는다고 했는데
    Model 에 담긴 값은 View 객체에 "Map" 형식으로 전달된다.

    예제 코드의 HelloController 클래스를 보면 DispatcherServlet 이 View 객체에 응답 생성을 요청할 때
    greeting 키를 갖는 Map 객체를 View 객체에 전달한다.
    View 객체는 전달받은 Map 객체에 담긴 값을 이용해서 알맞은 응답 결과를 출력한다.
    즉, InternalResourceView 가 Map 객체에 담겨 있는 키 값을 request.setAttribute() 를 이용해서 request 속성에 저장하고
    해당 경로의 JSP 를 실행한다.

    이렇게 컨트롤러에서 지정한 Model 속성이 JSP 에 전달될 때 request 객체 속성으로 전달되기 때문에
    JSP 에서는 ${greeting} 같이 모델에 지정한 속성 이름을 사용해서 값을 사용할 수 있는 것이다.


디폴트 핸들러와 HandlerMapping 우선순위
    web.xml 설정의 일부분을 보도록 하자.

    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    매핑 경로가 '/' 인 경우 .jsp 로 끝나는 요청을 제외한 모든 요청을 DispatcherServlet 이 처리한다.

    그런데 @EnableWebMvc 어노테이션이 등록하는 HandlerMapping 은
    @Controller 어노테이션을 적용한 빈 객체가 처리할 수 있는 요청 경로에만 대응 가능하다.
    즉, chap09 에서 사용한 예제로 보면 /hello 경로만 처리할 수 있는 것이다.

    그러면 /index.html 이나 /css/bootstrap.css 같은 요청을 처리할 수 있는 컨트롤러를 찾지 못하니까
    DispatcherServlet 은 404 응답을 전송해야 하는데

    저 경로들을 처리하기 위한 컨트롤러 객체를 직접 구현할 수도 있지만,
    chap09 에서는 WebMvcConfigurer 인터페이스의 configureDefaultServletHandling 메서드를 사용하였다.

    @Override
    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
        configurer.enable();
    }

    enable 메서드는 아래의 두 빈 객체를 추가한다.

    (1) DefaultServletHttpRequestHandler
    (2) SimpleUrlHandlerMapping

    @EnableWebMvc 어노테이션이 등록하는 RequestMappingHandlerMapping 이
        DefaultServletHandlerConfigurer#enable() 메서드가 등록하는 SimpleUrlHandlerMapping 보다 우선순위가 높다.

    아래에서 요청 순서를 상세히 뜯어보도록 하자.

    (1) RequestMappingHandlerMapping 을 사용해서 요청을 처리할 핸들러를 검색 - 존재하면 해당 컨트롤러에서 요청 처리

    (2) 존재하지 않으면 SimpleUrlHandlerMapping 을 사용해서 요청을 처리할 핸들러 검색
        DefaultServletHandlerConfigurer#enable() 메서드가 등록한 SimpleUrlHandlerMapping 은
        "/**" 경로(모든 경로) 에 대해 DefaultServletHttpRequestHandler 를 리턴한다.

        DispatcherServlet 은 DefaultServletHttpRequestHandler 에 처리를 요청하고
        DefaultServletHttpRequestHandler 는 디폴트 서블릿(WAS 가 제공하는)에 처리를 위임한다.


    요약 : DefaultServletHandlerConfigurer#enable() 을 설정하면 별도 설정이 없는 모든 요청 경로를 디폴트 서블릿이 처리함 !


