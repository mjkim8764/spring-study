1. @Component
    설정 파일에 빈으로 등록하지 않아도
    원하는 클래스를 빈으로 등록할 수 있게 함
    속성 값이 없으면 디폴트로 클래스 이름의 첫 글자를 소문자로 바꾼 이름(memberDao)의 빈을 사용


2. @Component 에 값을 넣으면 빈으로 등록할 때 사용할 이름이 결정된다.
    ex1) @Component("infoPrinter")
    ex2) @Component("listPrinter")

    이처럼 @Component 를 활용하여 빈 설정 코드를 더 간결하게 만들 수 있다.


3. 빈 객체를 반환받는 코드는 아래와 같이 타입만으로 빈을 검색, 반환받도록 할 수 있다.
    // MemberRegisterService regSvc = ctx.getBean("memberRegSvc", MemberRegisterService.class);
    MemberRegisterService regSvc = ctx.getBean(MemberRegisterService.class);


4. @Component 를 붙인 클래스를 스캔하여 빈으로 등록하려면 설정 클래스에 @ComponentScan 을 적용해야 함.
    ...
    @Configuration
    @ComponentScan(basePackages = {"spring"})
    ...

5. excludeFilters : 스캔할 때 특정 대상을 등록 대상에서 제외한다. 다양한 Filtertype 적용 가능(정규식, 어노테이션, 클래스 등)
    ex1) Regular Expression
        @ComponentScan(basePackages = {"spring"},
        excludeFilters = @ComponentScan.Filter(type = FilterType.REGEX, pattern = "spring\\...*Dao"))

    ex2) AspectJ pattern - pom.xml에 aspectjweaver dependency 추가해야 함.
        @ComponentScan(basePackages = {"spring"},
        excludeFilters = @ComponentScan.Filter(type = FilterType.ASPECTJ, pattern = "spring.*Dao"))
        이에 대한 상세한 설명은 AOP 에서 다룸.

    ex3) ANNOTATION
        @ComponentScan(basePackages = {"spring"},
        excludeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = {NoProduct.Class, ManualBean.class } ))

    ex4) ASSIGNABLE_TYPE - 특정 타입이나 그 하위 타입을 컴포넌트 대상에서 제외
        @ComponentScan(basePackages = {"spring"},
        excludeFilters = @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = MemberDao.class ))

    ex5) excludeFilters 속성에 배열을 사용하여 여러 가지 패턴 필터 가능
            @ComponentScan(basePackages = {"spring"},
            excludeFilters = { @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = ManualBean.class ),
                               @ComponentScan.Filter(type = FilterType.REGEX, pattern = "spring2\\..*") })

6. @Component 뿐만 아니라 아래의 어노테이션도 스캔 대상에 포함됨.
    @Controller
    @Service
    @Repository
    @Aspect
    @Configuration

7. 컴포넌트 스캔 충돌 처리의 예시
    (1) 빈 이름 충돌
        이슈 상황 : spring 패키지와 spring2 패키지에 모두 Test 클래스가 존재하고 모두 @Component 어노테이션이 있을 때
        @Configuration
        @ComponentScan(basePackages = {"spring", "spring2"})
        public class AppCtx {
            ...
        }

        방안 : 서로 다른 타입인데 같은 빈 이름을 사용하는 경우이다. 둘 중 하나를 명시적으로 빈 이름을 지정해서 충돌을 피해야 함.

    (2) 수동 등록한 빈과 충돌
        // MemberDao.java
        @Component
        public class MemberDao {
            ...
        }

        // AppCtx.java
        @Configuration
        @ComponentScan(basePackages = {"spring"})
        public class AppCtx {

            @Bean
            public MemberDao memberDao() {
                MemberDao memberDao = new MemberDao();
                return memberDao;
            }
        }

        스캔할 때 사용하는 빈 이름과 수동 등록한 빈 이름이 같다.
        이럴 때는 수동 등록한 빈(AppCtx에서 정의한) 한 개만 존재한다.


        // AppCtx.java
        @Configuration
        @ComponentScan(basePackages = {"spring"})
        public class AppCtx {

            @Bean
            public MemberDao memberDao2() {
                MemberDao memberDao = new MemberDao();
                return memberDao;
            }
        }

        이슈 상황 : 스캔을 통한 memberDao 빈과 수동 등록한 memberDao2 빈이 존재하는 상황.
        이 둘의 타입이 MemberDao로 같기 때문에 같은 타입의 두 개의 빈이 생성될 것이다.
        그렇기 때문에 자동 주입하는 코드는 @Qualifier 를 사용하여 둘 중 하나를 선택해야 할 것이다.

