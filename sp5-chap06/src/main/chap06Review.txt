1. 빈 객체의 라이프사이클
    객체 생성 -> 의존 설정 -> 초기화 -> 소멸

    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AppContext.class);
    컨테이너 초기화 코드다. 이 때,
    (1) 빈 객체 생성, (2) 의존 설정, (3) 빈 객체 초기화 과정이 모두 이루어진다.

    ctx.close()
    컨테이너 종료 코드다. 이 때, (4) 빈 객체의 소멸을 처리한다.


2. (3) 빈 객체 초기화와 (4) 빈 객체의 소멸을 위해서
    스프링은 빈 객체의 지정된 메서드(afterPropertiesSet, destroy)를 호출한다.

    만약 빈 객체 초기화, 소멸 시에 특정 작업을 해야 한다면
    InitializingBean, DisposableBean 인터페이스에 정의된 메서드들을 오버라이딩 하면 된다.

    public Interface InitializingBean {
        void afterPropertiesSet() throws Exception;
    }

    public Interface DisposableBean {
        void destroy() throws Exception;
    }

    이렇게 초기화, 소멸 과정이 필요한 예로 DB 커넥션 풀, 채팅 클라이언트 등이 있다
    DB 커넥션 풀의 경우
        - 커넥션 풀을 위한 빈 객체 초기화 과정(afterPropertiesSet)에서 DB 연결을 생성하고
        - 빈 객체 소멸 과정(destroy)에서 DB 연결을 끊는 코드가 있어야 할 것이다.


3. 외부에서 제공받은 클래스라서 위의 두 인터페이스를 사용하지 못하거나 사용하고 싶지 않을 때,
   이 클래스를 빈 객체로 설정하고 싶을 때가 있을 것이다.

   그럴 때는 @Bean 에 initMethod 속성과 destroyMethod 속성에 초기화, 소멸 과정에서 사용할 메서드 이름을 지정해주면 된다.
   ex) @Bean(initMethod = "connect", destroyMethod = "close")

4. @Bean 에 @Scope("prototype") 을 붙이면 프로토타입 범위의 빈이 설정된다.
   이렇게 되면, getBean() 메서드로 같은 타입의 같은 이름이라 하더라도 빈 객체를 구할 때마다 매번 새로운 객체를 반환한다.

   프로토타입 범위를 갖는 빈은 완전한 라이프사이클을 따르지 않는다.
   초기화 작업까지는 수행하지만 컨테이너를 종료해도 소멸되지 않으므로, 코드에서 직접 소멸 처리를 해야 한다.
